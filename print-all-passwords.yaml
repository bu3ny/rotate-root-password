---
# Playbook: Fetch and Decrypt All Server Password Information
# This playbook retrieves all encrypted server passwords from the database,
# decrypts them, and displays the passwords along with server details.
- name: Fetch and Decrypt All Server Password Information
  hosts: localhost  # Run on the local host since this script interacts with local resources.
  gather_facts: no  # Disabling fact gathering to speed up execution.
  become: no  # No privilege escalation is needed.

  vars_files:
    - vars/my_variables.yml  # Includes non-sensitive variable definitions.
    - vars/secret_vars.yml   # Includes sensitive credentials and keys.

  tasks:
    # Task: Query all encrypted passwords and their timestamps from the server_details table.
    - name: Query all encrypted passwords and timestamps from server_details
      mysql_query:
        login_db: "{{ vault_db_name }}"  # Database name from variables.
        login_user: "{{ vault_db_user }}"  # Database user from variables.
        login_password: "{{ vault_db_user_password }}"  # Database password from variables.
        query: "SELECT IP_Address, Server_Name, Encrypted_Password_AES_256, password_changed_at FROM server_details"
      register: query_result  # Store the query results in query_result for use in subsequent tasks.
      ignore_errors: yes  # Continue execution even if this query fails.

    # Task: Decrypt each password using OpenSSL.
    - name: Decrypt passwords and collect details
      shell: >
        echo "{{ item.Encrypted_Password_AES_256 }}" | openssl enc -aes-256-cbc -pbkdf2 -d -a -salt -pass pass:'{{ vault_encryption_key }}' | tr -d '\n'
      loop: "{{ query_result.query_result[0] }}"  # Loop over each record fetched from the database.
      register: decrypted_password  # Store decrypted passwords for further processing.
      when: query_result.query_result[0] | length > 0  # Only proceed if there are results.
      no_log: true  # Do not log decrypted information to avoid security risks.
      loop_control:
        label: "{{ item.IP_Address }}"  # Customize loop label for better readability in output.

    # Task: Combine all data into a structured list of dictionaries for each server.
    - set_fact:
        server_details: >
          {{ server_details | default([]) +
             [{'ip': item.item.IP_Address, 'hostname': item.item.Server_Name,
               'password': item.stdout, 'changed_at': item.item.password_changed_at}] }}
      loop: "{{ decrypted_password.results }}"  # Loop through each decrypted password result.
      when: decrypted_password.results | length > 0  # Ensure there are decrypted results to process.
      no_log: true  # Prevent logging sensitive details.

    # Task: Display all server details.
    - name: Display server details
      debug:
        msg: "{{ server_details }}"  # Output the structured server details.
      when: server_details is defined  # Only display if server_details has been set.
