---
# Playbook: Preparing the control node
# This play initializes the control node by setting up necessary variables,
# validating password complexity, and managing sensitive operations securely.
- name: Preparing the control node
  hosts: localhost
  gather_facts: true  # Gathering system facts
  become: yes  # Gain elevated privileges
  vars_files:
    - vars/my_variables.yml  # General variables
    - vars/secret_vars.yml   # Sensitive variables like database credentials

  tasks:
    # Block to manage backup and secure deletion of sensitive files.
    - block:

        # Ensure directories exist
        - name: Ensure directories exist
          file:
            path: "{{ item }}"
            state: directory
            mode: "0700"
          with_items:
            - "~/root-password-rotation/.tmp"
            - "~/root-password-rotation/encrypted_passwords"
            - "~/root-password-rotation/execution_logs"

        # Check the existence and gather stats of crucial files to manage backups.
        - name: Check if files exist and gather stats
          stat:
            path: "{{ item }}"
          register: file_stats
          loop:
            - "{{ encrypted_csv_file }}"
            - "{{ execution_logs_file }}"

        # Backup existing files before any modification or deletion.
        - name: Backup old encrypted CSV and Unreachable hosts files if they exist
          copy:
            src: "{{ item.item }}"
            dest: "{{ item.item }}_backup_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
          when: item.stat.exists
          loop: "{{ file_stats.results }}"

        # Securely delete old files to prevent any data leakage.
        - name: Securely delete old encrypted CSV and Unreachable hosts files if they exist
          shell: "shred -vzu -n10 {{ item.item }}"
          when: item.stat.exists
          loop: "{{ file_stats.results }}"
      no_log: true

    # Block for package management and installation to prepare for further configurations.
    - block:
        # Gather information about installed packages to avoid redundant installations.
        - name: Gather the package facts
          package_facts:
            manager: "auto"

        # Ensure MySQL server is installed, this is critical for database operations.
        - name: Install MySQL server (Red Hat-based systems)
          package:
            name: mysql-server
            state: present
          when: "'mysql-server' not in ansible_facts.packages"
          notify:  # Trigger starting and enabling MySQL and setting the root password.
            - start and enable mysql
            - set MySQL root password

        # Install additional required packages for system and Python operations.
        - name: Install other required packages (Red Hat-based systems)
          package:
            name: "{{ item }}"
            state: present
          loop:
            - openssl
            - pwgen
            - coreutils
            - mkpasswd
            - python3-PyMySQL
            - postfix
            - cyrus-sasl-plain
            - s-nail
          when: "item not in ansible_facts.packages"
          notify:
            - start and enable postfix
      no_log: true

    # Block to configure Postfix and setup the MySQL database.
    - block:
        # Configure Postfix to use a specified SMTP relay host for mail sending.
        - name: Configure main.cf for Postfix
          lineinfile:
            path: /etc/postfix/main.cf
            line: "{{ item.line }}"
            state: present
          loop:
            - { line: "relayhost = [{{ vault_relayhost }}]" }
          notify: restart postfix

        # Setup database accessibility for the MySQL root user.
        - name: Ensure MySQL root user can login with password
          mysql_db:
            login_user: root
            login_password: "{{ vault_mysql_root_password }}"
            name: "{{ vault_db_name }}"
            state: present  # Ensure the database is present.

        # Create a database user with full privileges for database management.
        - name: Create database user with all privileges
          mysql_user:
            login_user: root
            login_password: "{{ vault_mysql_root_password }}"
            name: "{{ vault_db_user }}"
            password: "{{ vault_db_user_password }}"
            priv: '*.*:ALL'  # Grant all privileges.
            host: '%'  # Allow access from any host.
            state: present

        # Ensure necessary database tables exist or create them if they do not.
        - name: Check if DB tables exist and create them if not exist
          mysql_query:
            login_user: "{{ vault_db_user }}"
            login_password: "{{ vault_db_user_password }}"
            login_db: "{{ vault_db_name }}"
            query: |
              CREATE TABLE IF NOT EXISTS {{ item.name }} (
                {{ item.schema | indent(12) }}
              );
          loop:
            - name: server_details
              schema: |
                IP_Address VARCHAR(15) NOT NULL,
                Server_Name VARCHAR(50) NOT NULL,
                User VARCHAR(50) NOT NULL,
                Encrypted_Password_AES_256 TEXT NOT NULL,
                password_changed_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                PRIMARY KEY (IP_Address)
            - name: execution_logs
              schema: |
                execution_id INT AUTO_INCREMENT PRIMARY KEY,
                execution_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                total_servers INT DEFAULT 0,
                passwords_changed INT DEFAULT 0,
                servers_unreachable INT DEFAULT 0,
                reachable_hosts JSON,
                unreachable_hosts JSON,
                failed_hosts JSON,
                sudo_failed_hosts JSON
          no_log: true  # Prevent logging of sensitive information.
          changed_when: false  # To avoid marking the task as changed if no new table is created.

  # Handlers are special tasks in Ansible that are only triggered by a notify directive from another task.
  # These handlers are used to manage the state of services after software package installations or other changes.
  handlers:
    # This handler ensures the MySQL service is started and enabled on the system.
    - name: start and enable mysql
      service:
        name: mysqld  # The service name for MySQL.
        state: started  # Ensures the service is running.
        enabled: yes  # Ensures the service is enabled on boot.

    # This handler sets or updates the MySQL root password.
    - name: set MySQL root password
      mysql_user:
        login_user: root  # The initial root login, which often doesn't have a password initially.
        login_password: ""  # Initial password is empty before setting.
        name: root  # Specifies the MySQL user account to modify.
        password: "{{ vault_mysql_root_password }}"  # Securely sets the root password from a vault variable.
        state: present  # Ensures the user is present with the specified password.

    # This handler is responsible for starting and enabling the Postfix mail service.
    - name: start and enable postfix
      service:
        name: postfix  # The service name for Postfix.
        state: started  # Ensures the Postfix service is running.
        enabled: yes  # Ensures Postfix is enabled on boot.

    # This handler restarts the Postfix service, useful for applying configuration changes.
    - name: restart postfix
      service:
        name: postfix  # The service name for Postfix.
        state: restarted  # Commands the service to restart.

    # This handler updates the Postfix map files, which are used for storing configurations like relayhost settings.
    - name: update postfix maps
      command: postmap /etc/postfix/sasl_passwd  # Executes the command to update the map used by Postfix.
      notify: restart postfix  # Triggers another handler to restart Postfix after updating the map to ensure changes take effect.


# Play to classify hosts based on their network reachability using the ping module.
- name: Classify hosts based on reachability
  hosts: all
  gather_facts: true
  ignore_unreachable: false
  ignore_errors: true
  remote_user: mostafa
  become: yes
  become_method: sudo
  no_log: true  # Prevents logging of potentially sensitive output.
  tasks:
    - block:
        # Check the reachability of each host using the standard ICMP ping.
        - name: Check reachability via ping
          ping:
          register: ping_result  # Save ping results to a variable.
          ignore_errors: true  # Continue execution even if the ping fails.

        # Dynamically create groups based on reachability for later use in the playbook.
        - name: Group by reachability
          group_by:
            key: "{{ 'reachable_hosts' if ping_result is defined and ping_result.ping == 'pong' else 'unreachable_hosts' }}"

    # Set facts based on reachability status for all hosts.
    - block:
        # Create a list of unreachable hosts based on the results of previous tasks.
        - name: Setting a list of unreachable hosts
          set_fact:
            unreachable_hosts: "{{ ansible_play_hosts_all | difference(ansible_play_hosts) }}"

        # Record the total number of servers managed in this playbook run.
        - name: Setting a list of other facts to log into the DB
          set_fact:
            total_servers: "{{ ansible_play_hosts_all | length }}"
          run_once: true  # Ensures this fact is set once for efficiency.
          delegate_to: localhost  # Execute the fact setting on the local machine.


# Play to classify hosts based on their Sudo access by checking if sudo commands can be executed without a password.
- name: Classify hosts based on Sudo Access
  hosts: all
  gather_facts: false  # Sudo access check does not require gathering system facts.
  ignore_unreachable: false
  ignore_errors: true
  remote_user: mostafa
  become: yes
  become_method: sudo
  no_log: true
  tasks:
    - block:
        # Check if the hosts have sudo access without requiring a password.
        - name: Check sudo access
          command: "sudo -n -l"
          register: sudo_check  # Stores the output of the sudo command.
          ignore_errors: true
          when: inventory_hostname != 'localhost'  # Skip the localhost.

        # Add hosts without sudo access to a specific list for reporting.
        - name: Add hosts without sudo access to sudo_failed_hosts
          set_fact:
            sudo_failed_hosts: "{{ sudo_failed_hosts | default([]) + [inventory_hostname] }}"
          when: sudo_check.failed  # Condition to add the host to the list.
          delegate_to: localhost
          run_once: true


# Playbook: Generating and changing root password for reachable hosts
# This play handles secure password generation and updating for hosts that were classified as reachable.
- name: Generating and changing root password for reachable hosts
  hosts: reachable_hosts  # Targets only hosts determined as reachable from previous checks.
  gather_facts: no  # Disables default fact gathering to speed up the playbook.
  ignore_unreachable: true  # Continues execution even if some hosts are unreachable during this play.
  remote_user: mostafa  # Specifies the user under which the remote commands will run.
  become: yes  # Escalates privileges.
  become_method: sudo  # Uses sudo for privilege escalation.
  vars_files:
    - vars/my_variables.yml  # Includes general non-sensitive variables.
    - vars/secret_vars.yml   # Includes sensitive data such as passwords and keys.
      #  no_log: true  # Ensures that details of operations performed are not logged, protecting sensitive data.

  tasks:
    - block:
        - name: Gathering facts
          setup:  # Explicitly gather facts if needed for conditions or further tasks within the block.

        # Generate a random secure password for each reachable host.
        - name: Generate random password for each reachable host
          delegate_to: localhost  # Runs the task on the control machine to ensure security.
          shell: 'cat /dev/urandom | tr -dc "A-Za-z0-9" | fold -w 24 | head -n 1'  # Generates a secure random password.
          register: random_password  # Stores the generated password for further use.
          when: random_password is not defined  # Ensures the password is generated only once if not already defined.
          changed_when: false  # Indicates that this task does not alter the state on the host.

        # Hash the generated password using the SHA-512 hashing algorithm.
        - name: Generate hashed password using mkpasswd
          delegate_to: localhost
          shell: "echo '{{ item }}' | mkpasswd --stdin --method=sha-512"  # Command to hash the password using SHA-512.
          register: hashed_password  # Stores the hashed password.
          loop: "{{ [random_password.stdout] }}"  # Loops over the generated password.
          changed_when: false  # Indicates that this task does not alter the state on the host.

        # Update the root password on the host using the hashed password.
        - name: Apply password change using chpasswd
          shell: "echo 'root:{{ item.stdout }}' | chpasswd -e"  # Command to update the root password.
          loop: "{{ hashed_password.results }}"  # Loops over the hashed password results.
          register: password_change_result  # Registers the result of the password change operation.
          failed_when: password_change_result.rc != 0  # Marks the task as failed if the return code is not zero.

        # Add hosts to a list where the password change operation failed.
        - name: Add hosts where password change failed to failed_hosts group
          set_fact:
            failed_hosts: "{{ failed_hosts | default([]) + [inventory_hostname] }}"  # Adds the host to the failed_hosts list.
          when: not password_change_result.changed  # Only adds to the list if the password change was not successful.

        # Encrypt the generated password using OpenSSL and encode it in base64 format.
        - name: Encrypt password using OpenSSL and encode in base64 with PBKDF2
          shell: echo "{{ random_password.stdout }}" | openssl enc -aes-256-cbc -pbkdf2 -a -salt -pass pass:'{{ vault_encryption_key }}' | tr -d '\n'
          register: encrypted_password  # Stores the encrypted password.
          when: random_password is defined and password_change_result.changed  # Ensures encryption only if the password change was successful.
          delegate_to: localhost  # Runs the encryption on the local machine to secure the process.

        # This task stores the encrypted password and the timestamp of the change in the database.
        # It executes only if the password change was successful and the password has been defined.
        - name: Store encrypted password and timestamp in database
          mysql_query:
            login_user: "{{ vault_db_user }}"  # Database username, usually stored securely in variables.
            login_password: "{{ vault_db_user_password }}"  # Database password, secured similarly.
            login_db: "{{ vault_db_name }}"  # Database where the data will be stored.
            query: >
              INSERT INTO server_details (IP_Address, Server_Name, User, Encrypted_Password_AES_256, password_changed_at)
              VALUES ('{{ hostvars[item].ansible_default_ipv4.address }}', '{{ hostvars[item].ansible_hostname }}', 'root', '{{ hostvars[item].encrypted_password.stdout }}', NOW())
              ON DUPLICATE KEY UPDATE Encrypted_Password_AES_256=VALUES(Encrypted_Password_AES_256), password_changed_at=VALUES(password_changed_at);
              # This SQL query inserts a new record or updates an existing one if a duplicate IP address is found.
              # It captures the IP, hostname, user, encrypted password, and the timestamp of the operation.
          loop: "{{ ansible_play_hosts }}"  # Loops over all hosts where passwords were changed.
          delegate_to: localhost  # Executes the task on the localhost where the database is accessible.
          when: random_password is defined and password_change_result.changed  # Ensures the task only runs if conditions are met.
          # Conditions check that the password was successfully changed and defined.

        # This task creates a CSV file to document the password changes, including the host information and timestamps.
        - name: Create CSV file with username, password changes, and timestamp
          lineinfile:
            dest: "{{ base_file }}"  # Destination file path for the CSV file.
            create: yes  # Ensures that the file is created if it does not already exist.
            line: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }},{{ ansible_hostname }},root,{{ random_password.stdout }},{{ ansible_date_time.iso8601 }}"
            # The line format includes the IP address, hostname, user (root), the new password, and the timestamp.
          delegate_to: localhost  # Task is performed on the local machine for security and access reasons.
          when: random_password is defined and password_change_result.changed  # Conditions to ensure the CSV entry is valid and necessary.

      when: ping_result is not unreachable and ping_result is not failed  # Ensures the block executes only if the host is reachable and no errors occurred.
      ignore_errors: true  # Allows the playbook to continue even if there are errors in this block.
      no_log: true  # Prevents logging of potentially sensitive information, crucial when handling passwords and user data.

    # After successfully changing passwords, This block handles the storage of execution data in the database after various operations are completed.
    - block:
        - name: Setting refined facts
          set_fact:
            passwords_changed: "{{ ansible_play_hosts_all | difference(unreachable_hosts | default([])) | difference(sudo_failed_hosts | default([])) | length | default(0) }}"
            servers_unreachable: "{{ unreachable_hosts | length + (sudo_failed_hosts | default([])) | length | default(0) }}"  # Sum of unreachable and sudo-failed hosts.
          run_once: true
          delegate_to: localhost
          when: sudo_failed_hosts is defined or unreachable_hosts is defined  # Ensure sudo_failed_hosts or unreachable_hosts is defined before using them.

        - name: Insert execution data into the database
          mysql_query:
            login_user: "{{ vault_db_user }}"
            login_password: "{{ vault_db_user_password }}"
            login_db: "{{ vault_db_name }}"
            query: >
              INSERT INTO execution_logs
              (total_servers, passwords_changed, servers_unreachable, reachable_hosts, unreachable_hosts, failed_hosts, sudo_failed_hosts)
              VALUES ('{{ total_servers }}', '{{ passwords_changed }}', '{{ servers_unreachable }}',
                      '{{ ansible_play_hosts | to_json }}', '{{ unreachable_hosts | to_json }}', '{{ failed_hosts | default([]) | to_json }}', '{{ sudo_failed_hosts | default([]) | to_json }}');
          delegate_to: localhost
          run_once: true

    # This block retrieves the most recent execution log from the database for reporting purposes.
    - block:
        - name: Fetch execution log values from the database
          mysql_query:
            login_user: "{{ vault_db_user }}"  # Uses secured database credentials for login.
            login_password: "{{ vault_db_user_password }}"
            login_db: "{{ vault_db_name }}"
            query: >
              SELECT total_servers, passwords_changed, servers_unreachable, reachable_hosts, unreachable_hosts, failed_hosts, sudo_failed_hosts
              FROM execution_logs
              ORDER BY execution_id DESC
              LIMIT 1
              # This SQL query selects the latest log entry from the execution_logs table, providing a snapshot of the most recent playbook execution.
              # It retrieves detailed information on the execution status across various hosts.
          register: execution_log_result  # The results of the query are stored in this variable for further processing or reporting.
          delegate_to: localhost  # Executes the query on the local machine, ensuring direct access to the database.

    # This set of tasks converts JSON-formatted strings from the database into usable lists for reporting.
    - block:
        # Convert the JSON string of failed hosts into a list for easy access in reporting.
        - name: Convert failed hosts to list
          set_fact:
            failed_hosts: "{{ execution_log_result.query_result[0][0].failed_hosts | from_json }}"
          delegate_to: localhost  # Executes on the local machine for direct access to control operations.

        # Convert the JSON string of hosts with failed sudo checks into a list, with a default empty list if none exist.
        - name: Convert sudo failed hosts to list
          set_fact:
            sudo_failed_hosts: "{{ execution_log_result.query_result[0][0].sudo_failed_hosts | default('[]') | from_json }}"
          delegate_to: localhost
          run_once: true  # Ensures this operation only happens once, even if run in a loop or multiple hosts.

        # Task to send an email summarizing the results of the playbook execution.
        - name: Send email with playbook execution recap and decryption instructions
          mail:
            host: 10.8.109.238  # Specifies the SMTP server to use for sending the email.
            port: 25  # SMTP server port.
            sender: root@idm-1.linux.example.com  # Email address used as the sender.
            to: postmaster@example.com  # Recipient email address.
            subject: "Root Password Change: Playbook Execution Summary"  # Subject of the email.
            body: |
              Hello,

              The Ansible playbook execution has been completed. Please find the attached execution recap and instructions below.

              Playbook Execution Recap:

                - Total Servers Checked: {{ execution_log_result.query_result[0][0].total_servers }}

                - Passwords Changed: {{ execution_log_result.query_result[0][0].passwords_changed }}

                - Servers Unreachable: {{ execution_log_result.query_result[0][0].servers_unreachable }}

                - List of Unreachable Hosts:
                  {% for host in execution_log_result.query_result[0][0].unreachable_hosts | from_json %}
                  - {{ host }}
                  {% endfor %}

                - List of Hosts Where Password Change Failed:
                  {% for host in execution_log_result.query_result[0][0].failed_hosts | from_json %}
                  - {{ host }}
                  {% endfor %}

                - List of Hosts Where Sudo Check Failed:
                  {% for host in execution_log_result.query_result[0][0].sudo_failed_hosts | from_json %}
                  - {{ host }}
                  {% endfor %}


              The generated CSV file containing sensitive information has been encrypted and stored securely. To manually decrypt the CSV file containing the passwords of the last run, please use the following command:
                # read -s -p "Enter encryption password: " password && \
                  echo && \
                  openssl enc -aes-256-cbc -pbkdf2 -d \
                  -in ~/root-password-rotation/encrypted_passwords/encrypted_passwords.enc \
                  -pass "pass:$password"


              You may use other Ansible Playbooks using "# ansible-playbook --ask-vault-pass <PLAYBOOK_NAME.yaml>":
                - print-all-passwords.yaml      # To print all the passwords stored in the DB.
                - print-server-password.yaml    # To print the password of a specific server based on IP/Name
                - print-logs.yaml               # To print the historical records of the root password change recap of each run.


              Kind Regards,
              Your Automation Team
          delegate_to: localhost  # Ensures the task is executed on the local machine.
          run_once: true  # Makes sure the email is sent only once per playbook run.

    # This block ensures the secure handling and storage of sensitive data, particularly after password changes and logging operations.
    - block:
        # Encrypt the CSV file containing sensitive password change data using OpenSSL.
        - name: Encrypt CSV file using OpenSSL
          command: >
            openssl enc -aes-256-cbc -pbkdf2 -e -in "{{ base_file }}" -out "{{ encrypted_csv_file }}" -pass "pass:{{ vault_password }}"
          # This command uses AES-256-CBC encryption with PBKDF2 passphrase derivation to secure the CSV file.
          # The encryption key is derived from an ansible vault variable containing the vault password, enhancing security.

        # Check if any unencrypted sensitive files still exist, ensuring that no sensitive data is left unprotected.
        - name: Check if unencrypted files exist
          stat:
            path: "{{ item }}"
          register: file_stats  # Stores the results of the file existence check.
          loop:
            - "{{ base_file }}"  # The original CSV file containing sensitive information.

        # Securely delete any plaintext files that contain sensitive information to ensure data protection.
        - name: Securely delete Plaintext unencrypted files if exist
          shell: "shred -vzu -n10 {{ item.item }}"
          # Uses the 'shred' command to securely delete files by overwriting them multiple times.
          when: item.stat.exists  # Only attempts to delete files if they are found to exist.
          loop: "{{ file_stats.results }}"  # Iterates over the files checked previously.

      ignore_errors: true  # Allows the playbook to continue even if an error occurs during this block.
      no_log: true  # Prevents logging of potentially sensitive information, crucial for operations involving secure data.
      delegate_to: localhost  # Ensures that these operations are carried out on the local machine where the playbook is run.
      run_once: true  # Ensures that the encryption and cleanup tasks are performed only once, regardless of the number of hosts involved.
