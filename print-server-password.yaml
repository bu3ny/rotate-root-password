---
# Playbook: Fetch and Decrypt Server Password Information
# Description: This playbook retrieves encrypted server password and its last change timestamp for a specified server,
# either by IP address or server name. It also checks when the server was last unreachable.
- name: Fetch and Decrypt Server Password Information
  hosts: localhost  # This playbook is intended to run on the localhost as it accesses local resources.
  gather_facts: no  # Fact gathering is disabled to speed up execution.
  become: no  # No privilege escalation is needed.

  # Prompt the user to input the server name or IP address for which they want to retrieve password information.
  vars_prompt:
    - name: server_identifier
      prompt: "Enter the server name or IP address"
      private: no  # The input is not sensitive and can be shown in the console.

  # Variable files containing necessary credentials and database configuration.
  vars_files:
    - vars/my_variables.yml  # General configuration variables.
    - vars/secret_vars.yml   # Sensitive data such as database credentials.

  tasks:
    # Task: Query encrypted password and timestamp from the server_details database table.
    - name: Query encrypted password and change timestamp from server_details
      mysql_query:
        login_db: "{{ vault_db_name }}"  # Database name to connect to.
        login_user: "{{ vault_db_user }}"  # Database username.
        login_password: "{{ vault_db_user_password }}"  # Database password.
        query: "SELECT Encrypted_Password_AES_256, password_changed_at FROM server_details WHERE IP_Address = '{{ server_identifier | quote }}' OR Server_Name = '{{ server_identifier | quote }}'"
      register: query_result  # Stores the database query results.
      ignore_errors: yes  # Continues execution even if the query fails.

    # Task: Decrypt the retrieved encrypted password using OpenSSL.
    - name: Decrypt password if found
      shell: >
        echo "{{ query_result.query_result[0][0]['Encrypted_Password_AES_256'] }}" | openssl enc -aes-256-cbc -pbkdf2 -d -a -salt -pass pass:'{{ vault_encryption_key }}' | tr -d '\n'
      register: decrypted_password  # Stores the output of the decryption process.
      when: query_result.query_result[0] | length > 0  # Only attempt decryption if the query returned results.
      no_log: true  # Prevents logging of sensitive data.
      changed_when: false

    # Task: Display the decrypted password and the timestamp of the last change.
    - name: Display decrypted password and timestamp
      debug:
        msg: "Decrypted Password: {{ decrypted_password.stdout }}, Last Changed: {{ query_result.query_result[0][0]['password_changed_at'] }}"
      when: query_result.query_result[0] | length > 0  # Only display if there are results to show.

    # Task: Query the last time the server was reported as unreachable from the execution_logs table.
    - name: Query last unreachable date from execution_logs
      mysql_query:
        login_db: "{{ vault_db_name }}"
        login_user: "{{ vault_db_user }}"
        login_password: "{{ vault_db_user_password }}"
        query: >
          SELECT execution_date AS last_unreachable_at
          FROM execution_logs
          WHERE JSON_CONTAINS(unreachable_hosts, '"{{ server_identifier | quote }}"')
          ORDER BY execution_date DESC
          LIMIT 1
      register: unreachable_result  # Stores the result of the query.
      ignore_errors: yes  # Allows the playbook to continue even if this query fails.

    # Task: Notify if the server is currently or was last known to be unreachable.
    - name: Notify if server is unreachable
      debug:
        msg: "The server is unreachable since: {{ unreachable_result['query_result'][0][0]['last_unreachable_at'] | default('No recent data found') }}"
      when: (unreachable_result['query_result'] | default([])) | length > 0  # Conditionally display this message based on query results.

    # Task: Notify if no relevant data was found in both server_details and execution_logs tables.
    - name: Notify if no entry found in both tables
      debug:
        msg: "No entry found for the provided server name or IP address."
      when: query_result.query_result[0] | default([]) | length == 0 and unreachable_result.query_result[0] | default([]) | length == 0  # Checks if both queries returned empty results.
